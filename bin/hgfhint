#!/usr/bin/env node
var fs = require('fs');
var readline = require('readline');
var stream = require('stream');
var devnull = require('dev-null');
var colors = require('colors');
var util = require('util');
var JSONStream = require('JSONStream');
var es = require('event-stream');

var hint = require('../hinter').hint;
var instruct = require('../instructor').instruct;

var yargs = require('yargs')
	.alias('o', 'output-into')
	.alias('?', 'help')
	.alias('silent', 'quiet')
	.alias('verbose', 'v')
	.boolean(['just_modify_cvt', 'silent', 'verbose'])
	.usage('$0 [Options] [<input.sfd>] [-o <output.sfd>]\n\
	       |Replace gridfit instructions in quadtaric SFD input file and rewrite the output file.\n\
	       |When the output file is missing, standard output is used instead.\n\
	       |When the input file is missing, standard input is used isntead.\n\
	       |\n\
	       |The new gridfits are optimized for Han characters.\n\
	       |'.replace(/^\s*\|/gm, ''))
	.describe('help', 'Displays this help.')
	.describe('o', 'Output sfd path. When absent, the result sfd is written to STDOUT.')
	.describe('UPM', 'Specify the units-per-em (upm) value for the input. Default: 1000.')
	.describe('PPEM_MIN', 'Switch hints below this PPEM value. Default: 10.')
	.describe('PPEM_MAX', 'Switch hints above this PPEM value. Default: 36.')
	.describe('silent', 'Run in quiet mode')
	.describe('verbose', 'Run in verbose mode')
	.describe('just_modify_cvt', 'Don\'t change any Truetype insructions, just append items into the cvt table.')

var argv = yargs.argv;

if(argv.help) {
	yargs.showHelp();
	process.exit(0)
}

var inStream = argv._[0] ? fs.createReadStream(argv._[0]): process.stdin;
var outStream = argv.o ? fs.createWriteStream(argv.o, { encoding: 'utf-8' }): process.stdout;
var rl = readline.createInterface(inStream, devnull());
var strategy = require('../strategy').from(argv);
var cvt = require('../cvt').from(argv, strategy);

var divide = argv.d || 1;
var modulo = argv.m || 0;

var j = 0;
var n = 0;

outStream.write('[');
var started = false;
var finished = false;

function finish(){
	if(finished) return;
	finished = true;
	outStream.write(']\n');
}

inStream.pipe(JSONStream.parse('*')).pipe(es.mapSync(function(data){
	if(j % divide === modulo) {
		if(n % 100 === 0 && !argv.silent || argv.verbose) {
			process.stderr.write(('Progress: Hinting /' + data[0] + ' of ' + (argv._[0] || '(stdin)') + ' (#' + j + ')').cyan + '\n')
		}
		var glyph = data[1];
		var stemActions = [];
		var nMDRPnr = 0, nMDRPr = 0;
		for(var ppem = strategy.PPEM_MIN; ppem < strategy.PPEM_MAX; ppem++){
			var actions = hint(glyph, ppem, strategy);
			for(var k = 0; k < actions.length; k++){
				if(actions[k].length === 4) {
					nMDRPnr += 1
				} else if(Math.round(actions[k][3]) === actions[k][4] && Math.abs(actions[k][3] - actions[k][4]) < 0.48){
					nMDRPr += 1
				}
			}
			stemActions[ppem] = actions;
		}
		j++;

		n++;
		outStream.write((started ? ',\n' : (started = true, '')) + JSON.stringify([data[0], instruct(glyph, stemActions, strategy, cvt, argv.CVT_PADDING || 0, nMDRPnr > nMDRPr)]));
	} else {
		j++;
		return ''
	}
})).on('end', finish).on('close', finish).on('error', finish);